// <auto-generated />
using System;
using CourseSelection.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseSelection.Data.Migrations
{
    [DbContext(typeof(CourseSelectionContext))]
    [Migration("20241016131545_addIdentity")]
    partial class addIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseSelection.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("教室代碼");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("教室名稱");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClassId" }, "UQ_Classes_ClassId")
                        .IsUnique();

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("AcademicYear")
                        .HasColumnType("smallint")
                        .HasComment("學年度");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("CurrentEnrollment")
                        .HasColumnType("int")
                        .HasComment("目前選課人數");

                    b.Property<byte>("DayOfWeek")
                        .HasColumnType("tinyint")
                        .HasComment("課程為每週幾，星期一 = 1，星期二 = 2，星期三 = 3..., 星期日 = 7");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasComment("上課結束時間");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasComment("已刪除為1，未刪除為0");

                    b.Property<int>("Language")
                        .HasColumnType("int")
                        .HasComment("授課語言(國語 = 0, 英語 = 1)");

                    b.Property<int>("MaximumEnrollment")
                        .HasColumnType("int")
                        .HasComment("開課人數上限");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("課程名稱");

                    b.Property<bool>("Required")
                        .HasColumnType("bit")
                        .HasComment("必選修(必修為1，選修為0)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasComment("上課開始時間");

                    b.Property<string>("Syllabus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("課程簡介");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TeacherId");

                    b.HasIndex(new[] { "CourseId" }, "UQ_Courses_CourseId")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.SelectedCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SelectedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasComment("選課狀態，選課成功 = 0, 已退選 = 1");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("SelectedCourses");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Department")
                        .HasColumnType("int")
                        .HasComment("所屬系所(心理學系 = 1, 特殊教育學系 = 2, 資訊管理學系 = 3, 資訊工程學系 = 4, 建築學系 = 5, 會計學系 = 6, 國際經營與貿易學系 =7");

                    b.Property<int>("EnrollmentYear")
                        .HasColumnType("int")
                        .HasComment("入學年份");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("學號");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StudentId" }, "UQ_Students_StudentId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "UQ_Students_UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Department")
                        .HasColumnType("int")
                        .HasComment("所屬部門(理學院 = 1, 人文與教育學院 = 2, 商學院 = 3, 法學院 = 4, 電資學院 = 5, 工學院 = 6, 設計學院 =7)");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasComment("職稱(助理教授 = 1, 副教授 = 2, 教授 = 3, 講師 = 4)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TeacherId" }, "UQ_Teachers_TeacherId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "UQ_Teachers_UserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "UQ_Users_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "Phone" }, "UQ_Users_Phone")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.Course", b =>
                {
                    b.HasOne("CourseSelection.Data.Models.Class", "Class")
                        .WithMany("Courses")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Courses_Classes");

                    b.HasOne("CourseSelection.Data.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Courses_Teachers");

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.SelectedCourse", b =>
                {
                    b.HasOne("CourseSelection.Data.Models.Course", "Course")
                        .WithMany("SelectedCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_SelectedCourses_Courese");

                    b.HasOne("CourseSelection.Data.Models.Student", "Student")
                        .WithMany("SelectedCourses")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_SelectedCourses_Students");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.Student", b =>
                {
                    b.HasOne("CourseSelection.Data.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("CourseSelection.Data.Models.Student", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.Teacher", b =>
                {
                    b.HasOne("CourseSelection.Data.Models.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("CourseSelection.Data.Models.Teacher", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Teachers_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.Class", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.Course", b =>
                {
                    b.Navigation("SelectedCourses");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.Student", b =>
                {
                    b.Navigation("SelectedCourses");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.Teacher", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CourseSelection.Data.Models.User", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
